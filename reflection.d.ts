/// <reference path="typings/java/java.d.ts" />
/// <reference path="typings/bluebird/bluebird.d.ts" />
export = Module;
declare module Module {
    function ensureJvm(): Promise<void>;
    function importClass(className: 'Object'): java.lang.Object.Static;
    function importClass(className: 'String'): java.lang.String.Static;
    function importClass(className: 'Long'): java.lang.Long.Static;
    function importClass(className: 'java.lang.Object'): java.lang.Object.Static;
    function importClass(className: 'java.lang.String'): java.lang.String.Static;
    function importClass(className: 'java.lang.Long'): java.lang.Long.Static;
    function importClass(className: string): any;
    function newInstanceSync(className: string, ...args: any[]): any;
    interface longValue_t extends Number {
        longValue: string;
    }
    type string_t = string | java.lang.String;
    type object_t = java.lang.Object | string | boolean | number | longValue_t;
    type long_t = number | longValue_t | java.lang.Long;
    type boolean_t = boolean | java.lang.Boolean;
    interface array_t<T> extends java.lang.Object {
        __dummy: T;
    }
    type object_array_t = array_t<java.lang.Object> | object_t[];
    export import Callback = Java.Callback;
    export import Boolean = java.lang.Boolean;
    export import Class = java.lang.Class;
    export import Long = java.lang.Long;
    export import Object = java.lang.Object;
    export import String = java.lang.String;
    module java.lang {
        interface Boolean extends java.lang.Object {
            booleanValueA(cb: Callback<boolean>): void;
            booleanValue(): boolean;
            booleanValueP(): Promise<boolean>;
            compareToA(arg0: boolean_t, cb: Callback<object_t>): void;
            compareTo(arg0: boolean_t): object_t;
            compareToP(arg0: boolean_t): Promise<object_t>;
            compareToA(arg0: object_t, cb: Callback<object_t>): void;
            compareTo(arg0: object_t): object_t;
            compareToP(arg0: object_t): Promise<object_t>;
            equalsA(arg0: object_t, cb: Callback<boolean>): void;
            equals(arg0: object_t): boolean;
            equalsP(arg0: object_t): Promise<boolean>;
            getClassA(cb: Callback<Class>): void;
            getClass(): Class;
            getClassP(): Promise<Class>;
            hashCodeA(cb: Callback<object_t>): void;
            hashCode(): object_t;
            hashCodeP(): Promise<object_t>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            waitA(arg0: long_t, arg1: object_t, cb: Callback<void>): void;
            wait(arg0: long_t, arg1: object_t): void;
            waitP(arg0: long_t, arg1: object_t): Promise<void>;
            waitA(arg0: long_t, cb: Callback<void>): void;
            wait(arg0: long_t): void;
            waitP(arg0: long_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module Boolean {
            interface Static {
                new (arg0: string_t): java.lang.Boolean;
                new (arg0: boolean_t): java.lang.Boolean;
                compareA(arg0: boolean_t, arg1: boolean_t, cb: Callback<object_t>): void;
                compare(arg0: boolean_t, arg1: boolean_t): object_t;
                compareP(arg0: boolean_t, arg1: boolean_t): Promise<object_t>;
                getBooleanA(arg0: string_t, cb: Callback<boolean>): void;
                getBoolean(arg0: string_t): boolean;
                getBooleanP(arg0: string_t): Promise<boolean>;
                hashCodeA(arg0: boolean_t, cb: Callback<object_t>): void;
                hashCode(arg0: boolean_t): object_t;
                hashCodeP(arg0: boolean_t): Promise<object_t>;
                logicalAndA(arg0: boolean_t, arg1: boolean_t, cb: Callback<boolean>): void;
                logicalAnd(arg0: boolean_t, arg1: boolean_t): boolean;
                logicalAndP(arg0: boolean_t, arg1: boolean_t): Promise<boolean>;
                logicalOrA(arg0: boolean_t, arg1: boolean_t, cb: Callback<boolean>): void;
                logicalOr(arg0: boolean_t, arg1: boolean_t): boolean;
                logicalOrP(arg0: boolean_t, arg1: boolean_t): Promise<boolean>;
                logicalXorA(arg0: boolean_t, arg1: boolean_t, cb: Callback<boolean>): void;
                logicalXor(arg0: boolean_t, arg1: boolean_t): boolean;
                logicalXorP(arg0: boolean_t, arg1: boolean_t): Promise<boolean>;
                parseBooleanA(arg0: string_t, cb: Callback<boolean>): void;
                parseBoolean(arg0: string_t): boolean;
                parseBooleanP(arg0: string_t): Promise<boolean>;
                toStringA(arg0: boolean_t, cb: Callback<string>): void;
                toString(arg0: boolean_t): string;
                toStringP(arg0: boolean_t): Promise<string>;
                valueOfA(arg0: string_t, cb: Callback<boolean>): void;
                valueOf(arg0: string_t): boolean;
                valueOfP(arg0: string_t): Promise<boolean>;
                valueOfA(arg0: boolean_t, cb: Callback<boolean>): void;
                valueOf(arg0: boolean_t): boolean;
                valueOfP(arg0: boolean_t): Promise<boolean>;
                TRUE: boolean;
                FALSE: boolean;
                TYPE: Class;
            }
        }
    }
    module java.lang {
        interface Class extends java.lang.Object {
            asSubclassA(arg0: Class, cb: Callback<Class>): void;
            asSubclass(arg0: Class): Class;
            asSubclassP(arg0: Class): Promise<Class>;
            castA(arg0: object_t, cb: Callback<object_t>): void;
            cast(arg0: object_t): object_t;
            castP(arg0: object_t): Promise<object_t>;
            desiredAssertionStatusA(cb: Callback<boolean>): void;
            desiredAssertionStatus(): boolean;
            desiredAssertionStatusP(): Promise<boolean>;
            equalsA(arg0: object_t, cb: Callback<boolean>): void;
            equals(arg0: object_t): boolean;
            equalsP(arg0: object_t): Promise<boolean>;
            getAnnotatedInterfacesA(cb: Callback<object_t[]>): void;
            getAnnotatedInterfaces(): object_t[];
            getAnnotatedInterfacesP(): Promise<object_t[]>;
            getAnnotatedSuperclassA(cb: Callback<object_t>): void;
            getAnnotatedSuperclass(): object_t;
            getAnnotatedSuperclassP(): Promise<object_t>;
            getAnnotationA(arg0: Class, cb: Callback<object_t>): void;
            getAnnotation(arg0: Class): object_t;
            getAnnotationP(arg0: Class): Promise<object_t>;
            getAnnotationsA(cb: Callback<object_t[]>): void;
            getAnnotations(): object_t[];
            getAnnotationsP(): Promise<object_t[]>;
            getAnnotationsByTypeA(arg0: Class, cb: Callback<object_t[]>): void;
            getAnnotationsByType(arg0: Class): object_t[];
            getAnnotationsByTypeP(arg0: Class): Promise<object_t[]>;
            getCanonicalNameA(cb: Callback<string>): void;
            getCanonicalName(): string;
            getCanonicalNameP(): Promise<string>;
            getClassA(cb: Callback<Class>): void;
            getClass(): Class;
            getClassP(): Promise<Class>;
            getClassesA(cb: Callback<Class[]>): void;
            getClasses(): Class[];
            getClassesP(): Promise<Class[]>;
            getClassLoaderA(cb: Callback<object_t>): void;
            getClassLoader(): object_t;
            getClassLoaderP(): Promise<object_t>;
            getComponentTypeA(cb: Callback<Class>): void;
            getComponentType(): Class;
            getComponentTypeP(): Promise<Class>;
            getConstructorA(arg0: array_t<Class>, cb: Callback<object_t>): void;
            getConstructor(...arg0: Class[]): object_t;
            getConstructor(arg0: array_t<Class>): object_t;
            getConstructorP(...arg0: Class[]): Promise<object_t>;
            getConstructorP(arg0: array_t<Class>): Promise<object_t>;
            getConstructorsA(cb: Callback<object_t[]>): void;
            getConstructors(): object_t[];
            getConstructorsP(): Promise<object_t[]>;
            getDeclaredAnnotationA(arg0: Class, cb: Callback<object_t>): void;
            getDeclaredAnnotation(arg0: Class): object_t;
            getDeclaredAnnotationP(arg0: Class): Promise<object_t>;
            getDeclaredAnnotationsA(cb: Callback<object_t[]>): void;
            getDeclaredAnnotations(): object_t[];
            getDeclaredAnnotationsP(): Promise<object_t[]>;
            getDeclaredAnnotationsByTypeA(arg0: Class, cb: Callback<object_t[]>): void;
            getDeclaredAnnotationsByType(arg0: Class): object_t[];
            getDeclaredAnnotationsByTypeP(arg0: Class): Promise<object_t[]>;
            getDeclaredClassesA(cb: Callback<Class[]>): void;
            getDeclaredClasses(): Class[];
            getDeclaredClassesP(): Promise<Class[]>;
            getDeclaredConstructorA(arg0: array_t<Class>, cb: Callback<object_t>): void;
            getDeclaredConstructor(...arg0: Class[]): object_t;
            getDeclaredConstructor(arg0: array_t<Class>): object_t;
            getDeclaredConstructorP(...arg0: Class[]): Promise<object_t>;
            getDeclaredConstructorP(arg0: array_t<Class>): Promise<object_t>;
            getDeclaredConstructorsA(cb: Callback<object_t[]>): void;
            getDeclaredConstructors(): object_t[];
            getDeclaredConstructorsP(): Promise<object_t[]>;
            getDeclaredFieldA(arg0: string_t, cb: Callback<object_t>): void;
            getDeclaredField(arg0: string_t): object_t;
            getDeclaredFieldP(arg0: string_t): Promise<object_t>;
            getDeclaredFieldsA(cb: Callback<object_t[]>): void;
            getDeclaredFields(): object_t[];
            getDeclaredFieldsP(): Promise<object_t[]>;
            getDeclaredMethodA(arg0: string_t, arg1: array_t<Class>, cb: Callback<object_t>): void;
            getDeclaredMethod(arg0: string_t, ...arg1: Class[]): object_t;
            getDeclaredMethod(arg0: string_t, arg1: array_t<Class>): object_t;
            getDeclaredMethodP(arg0: string_t, ...arg1: Class[]): Promise<object_t>;
            getDeclaredMethodP(arg0: string_t, arg1: array_t<Class>): Promise<object_t>;
            getDeclaredMethodsA(cb: Callback<object_t[]>): void;
            getDeclaredMethods(): object_t[];
            getDeclaredMethodsP(): Promise<object_t[]>;
            getDeclaringClassA(cb: Callback<Class>): void;
            getDeclaringClass(): Class;
            getDeclaringClassP(): Promise<Class>;
            getEnclosingClassA(cb: Callback<Class>): void;
            getEnclosingClass(): Class;
            getEnclosingClassP(): Promise<Class>;
            getEnclosingConstructorA(cb: Callback<object_t>): void;
            getEnclosingConstructor(): object_t;
            getEnclosingConstructorP(): Promise<object_t>;
            getEnclosingMethodA(cb: Callback<object_t>): void;
            getEnclosingMethod(): object_t;
            getEnclosingMethodP(): Promise<object_t>;
            getEnumConstantsA(cb: Callback<object_t[]>): void;
            getEnumConstants(): object_t[];
            getEnumConstantsP(): Promise<object_t[]>;
            getFieldA(arg0: string_t, cb: Callback<object_t>): void;
            getField(arg0: string_t): object_t;
            getFieldP(arg0: string_t): Promise<object_t>;
            getFieldsA(cb: Callback<object_t[]>): void;
            getFields(): object_t[];
            getFieldsP(): Promise<object_t[]>;
            getGenericInterfacesA(cb: Callback<object_t[]>): void;
            getGenericInterfaces(): object_t[];
            getGenericInterfacesP(): Promise<object_t[]>;
            getGenericSuperclassA(cb: Callback<object_t>): void;
            getGenericSuperclass(): object_t;
            getGenericSuperclassP(): Promise<object_t>;
            getInterfacesA(cb: Callback<Class[]>): void;
            getInterfaces(): Class[];
            getInterfacesP(): Promise<Class[]>;
            getMethodA(arg0: string_t, arg1: array_t<Class>, cb: Callback<object_t>): void;
            getMethod(arg0: string_t, ...arg1: Class[]): object_t;
            getMethod(arg0: string_t, arg1: array_t<Class>): object_t;
            getMethodP(arg0: string_t, ...arg1: Class[]): Promise<object_t>;
            getMethodP(arg0: string_t, arg1: array_t<Class>): Promise<object_t>;
            getMethodsA(cb: Callback<object_t[]>): void;
            getMethods(): object_t[];
            getMethodsP(): Promise<object_t[]>;
            getModifiersA(cb: Callback<object_t>): void;
            getModifiers(): object_t;
            getModifiersP(): Promise<object_t>;
            getNameA(cb: Callback<string>): void;
            getName(): string;
            getNameP(): Promise<string>;
            getPackageA(cb: Callback<object_t>): void;
            getPackage(): object_t;
            getPackageP(): Promise<object_t>;
            getProtectionDomainA(cb: Callback<object_t>): void;
            getProtectionDomain(): object_t;
            getProtectionDomainP(): Promise<object_t>;
            getResourceA(arg0: string_t, cb: Callback<object_t>): void;
            getResource(arg0: string_t): object_t;
            getResourceP(arg0: string_t): Promise<object_t>;
            getResourceAsStreamA(arg0: string_t, cb: Callback<object_t>): void;
            getResourceAsStream(arg0: string_t): object_t;
            getResourceAsStreamP(arg0: string_t): Promise<object_t>;
            getSignersA(cb: Callback<object_t[]>): void;
            getSigners(): object_t[];
            getSignersP(): Promise<object_t[]>;
            getSimpleNameA(cb: Callback<string>): void;
            getSimpleName(): string;
            getSimpleNameP(): Promise<string>;
            getSuperclassA(cb: Callback<Class>): void;
            getSuperclass(): Class;
            getSuperclassP(): Promise<Class>;
            getTypeNameA(cb: Callback<string>): void;
            getTypeName(): string;
            getTypeNameP(): Promise<string>;
            getTypeParametersA(cb: Callback<object_t[]>): void;
            getTypeParameters(): object_t[];
            getTypeParametersP(): Promise<object_t[]>;
            hashCodeA(cb: Callback<object_t>): void;
            hashCode(): object_t;
            hashCodeP(): Promise<object_t>;
            isAnnotationA(cb: Callback<boolean>): void;
            isAnnotation(): boolean;
            isAnnotationP(): Promise<boolean>;
            isAnnotationPresentA(arg0: Class, cb: Callback<boolean>): void;
            isAnnotationPresent(arg0: Class): boolean;
            isAnnotationPresentP(arg0: Class): Promise<boolean>;
            isAnonymousClassA(cb: Callback<boolean>): void;
            isAnonymousClass(): boolean;
            isAnonymousClassP(): Promise<boolean>;
            isArrayA(cb: Callback<boolean>): void;
            isArray(): boolean;
            isArrayP(): Promise<boolean>;
            isAssignableFromA(arg0: Class, cb: Callback<boolean>): void;
            isAssignableFrom(arg0: Class): boolean;
            isAssignableFromP(arg0: Class): Promise<boolean>;
            isEnumA(cb: Callback<boolean>): void;
            isEnum(): boolean;
            isEnumP(): Promise<boolean>;
            isInstanceA(arg0: object_t, cb: Callback<boolean>): void;
            isInstance(arg0: object_t): boolean;
            isInstanceP(arg0: object_t): Promise<boolean>;
            isInterfaceA(cb: Callback<boolean>): void;
            isInterface(): boolean;
            isInterfaceP(): Promise<boolean>;
            isLocalClassA(cb: Callback<boolean>): void;
            isLocalClass(): boolean;
            isLocalClassP(): Promise<boolean>;
            isMemberClassA(cb: Callback<boolean>): void;
            isMemberClass(): boolean;
            isMemberClassP(): Promise<boolean>;
            isPrimitiveA(cb: Callback<boolean>): void;
            isPrimitive(): boolean;
            isPrimitiveP(): Promise<boolean>;
            isSyntheticA(cb: Callback<boolean>): void;
            isSynthetic(): boolean;
            isSyntheticP(): Promise<boolean>;
            newInstanceA(cb: Callback<object_t>): void;
            newInstance(): object_t;
            newInstanceP(): Promise<object_t>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            toGenericStringA(cb: Callback<string>): void;
            toGenericString(): string;
            toGenericStringP(): Promise<string>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            waitA(arg0: long_t, arg1: object_t, cb: Callback<void>): void;
            wait(arg0: long_t, arg1: object_t): void;
            waitP(arg0: long_t, arg1: object_t): Promise<void>;
            waitA(arg0: long_t, cb: Callback<void>): void;
            wait(arg0: long_t): void;
            waitP(arg0: long_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module Class {
            interface Static {
                forNameA(arg0: string_t, arg1: boolean_t, arg2: object_t, cb: Callback<Class>): void;
                forName(arg0: string_t, arg1: boolean_t, arg2: object_t): Class;
                forNameP(arg0: string_t, arg1: boolean_t, arg2: object_t): Promise<Class>;
                forNameA(arg0: string_t, cb: Callback<Class>): void;
                forName(arg0: string_t): Class;
                forNameP(arg0: string_t): Promise<Class>;
            }
        }
    }
    module java.lang {
        interface Long extends java.lang.Object {
            byteValueA(cb: Callback<object_t>): void;
            byteValue(): object_t;
            byteValueP(): Promise<object_t>;
            compareToA(arg0: object_t, cb: Callback<object_t>): void;
            compareTo(arg0: object_t): object_t;
            compareToP(arg0: object_t): Promise<object_t>;
            compareToA(arg0: long_t, cb: Callback<object_t>): void;
            compareTo(arg0: long_t): object_t;
            compareToP(arg0: long_t): Promise<object_t>;
            doubleValueA(cb: Callback<object_t>): void;
            doubleValue(): object_t;
            doubleValueP(): Promise<object_t>;
            equalsA(arg0: object_t, cb: Callback<boolean>): void;
            equals(arg0: object_t): boolean;
            equalsP(arg0: object_t): Promise<boolean>;
            floatValueA(cb: Callback<object_t>): void;
            floatValue(): object_t;
            floatValueP(): Promise<object_t>;
            getClassA(cb: Callback<Class>): void;
            getClass(): Class;
            getClassP(): Promise<Class>;
            hashCodeA(cb: Callback<object_t>): void;
            hashCode(): object_t;
            hashCodeP(): Promise<object_t>;
            intValueA(cb: Callback<object_t>): void;
            intValue(): object_t;
            intValueP(): Promise<object_t>;
            longValueA(cb: Callback<longValue_t>): void;
            longValue(): longValue_t;
            longValueP(): Promise<longValue_t>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            shortValueA(cb: Callback<object_t>): void;
            shortValue(): object_t;
            shortValueP(): Promise<object_t>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            waitA(arg0: long_t, arg1: object_t, cb: Callback<void>): void;
            wait(arg0: long_t, arg1: object_t): void;
            waitP(arg0: long_t, arg1: object_t): Promise<void>;
            waitA(arg0: long_t, cb: Callback<void>): void;
            wait(arg0: long_t): void;
            waitP(arg0: long_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module Long {
            interface Static {
                new (arg0: string_t): java.lang.Long;
                new (arg0: long_t): java.lang.Long;
                bitCountA(arg0: long_t, cb: Callback<object_t>): void;
                bitCount(arg0: long_t): object_t;
                bitCountP(arg0: long_t): Promise<object_t>;
                compareA(arg0: long_t, arg1: long_t, cb: Callback<object_t>): void;
                compare(arg0: long_t, arg1: long_t): object_t;
                compareP(arg0: long_t, arg1: long_t): Promise<object_t>;
                compareUnsignedA(arg0: long_t, arg1: long_t, cb: Callback<object_t>): void;
                compareUnsigned(arg0: long_t, arg1: long_t): object_t;
                compareUnsignedP(arg0: long_t, arg1: long_t): Promise<object_t>;
                decodeA(arg0: string_t, cb: Callback<longValue_t>): void;
                decode(arg0: string_t): longValue_t;
                decodeP(arg0: string_t): Promise<longValue_t>;
                divideUnsignedA(arg0: long_t, arg1: long_t, cb: Callback<longValue_t>): void;
                divideUnsigned(arg0: long_t, arg1: long_t): longValue_t;
                divideUnsignedP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
                getLongA(arg0: string_t, arg1: long_t, cb: Callback<longValue_t>): void;
                getLong(arg0: string_t, arg1: long_t): longValue_t;
                getLongP(arg0: string_t, arg1: long_t): Promise<longValue_t>;
                getLongA(arg0: string_t, arg1: long_t, cb: Callback<longValue_t>): void;
                getLong(arg0: string_t, arg1: long_t): longValue_t;
                getLongP(arg0: string_t, arg1: long_t): Promise<longValue_t>;
                getLongA(arg0: string_t, cb: Callback<longValue_t>): void;
                getLong(arg0: string_t): longValue_t;
                getLongP(arg0: string_t): Promise<longValue_t>;
                hashCodeA(arg0: long_t, cb: Callback<object_t>): void;
                hashCode(arg0: long_t): object_t;
                hashCodeP(arg0: long_t): Promise<object_t>;
                highestOneBitA(arg0: long_t, cb: Callback<longValue_t>): void;
                highestOneBit(arg0: long_t): longValue_t;
                highestOneBitP(arg0: long_t): Promise<longValue_t>;
                lowestOneBitA(arg0: long_t, cb: Callback<longValue_t>): void;
                lowestOneBit(arg0: long_t): longValue_t;
                lowestOneBitP(arg0: long_t): Promise<longValue_t>;
                maxA(arg0: long_t, arg1: long_t, cb: Callback<longValue_t>): void;
                max(arg0: long_t, arg1: long_t): longValue_t;
                maxP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
                minA(arg0: long_t, arg1: long_t, cb: Callback<longValue_t>): void;
                min(arg0: long_t, arg1: long_t): longValue_t;
                minP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
                numberOfLeadingZerosA(arg0: long_t, cb: Callback<object_t>): void;
                numberOfLeadingZeros(arg0: long_t): object_t;
                numberOfLeadingZerosP(arg0: long_t): Promise<object_t>;
                numberOfTrailingZerosA(arg0: long_t, cb: Callback<object_t>): void;
                numberOfTrailingZeros(arg0: long_t): object_t;
                numberOfTrailingZerosP(arg0: long_t): Promise<object_t>;
                parseLongA(arg0: string_t, arg1: object_t, cb: Callback<longValue_t>): void;
                parseLong(arg0: string_t, arg1: object_t): longValue_t;
                parseLongP(arg0: string_t, arg1: object_t): Promise<longValue_t>;
                parseLongA(arg0: string_t, cb: Callback<longValue_t>): void;
                parseLong(arg0: string_t): longValue_t;
                parseLongP(arg0: string_t): Promise<longValue_t>;
                parseUnsignedLongA(arg0: string_t, arg1: object_t, cb: Callback<longValue_t>): void;
                parseUnsignedLong(arg0: string_t, arg1: object_t): longValue_t;
                parseUnsignedLongP(arg0: string_t, arg1: object_t): Promise<longValue_t>;
                parseUnsignedLongA(arg0: string_t, cb: Callback<longValue_t>): void;
                parseUnsignedLong(arg0: string_t): longValue_t;
                parseUnsignedLongP(arg0: string_t): Promise<longValue_t>;
                remainderUnsignedA(arg0: long_t, arg1: long_t, cb: Callback<longValue_t>): void;
                remainderUnsigned(arg0: long_t, arg1: long_t): longValue_t;
                remainderUnsignedP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
                reverseA(arg0: long_t, cb: Callback<longValue_t>): void;
                reverse(arg0: long_t): longValue_t;
                reverseP(arg0: long_t): Promise<longValue_t>;
                reverseBytesA(arg0: long_t, cb: Callback<longValue_t>): void;
                reverseBytes(arg0: long_t): longValue_t;
                reverseBytesP(arg0: long_t): Promise<longValue_t>;
                rotateLeftA(arg0: long_t, arg1: object_t, cb: Callback<longValue_t>): void;
                rotateLeft(arg0: long_t, arg1: object_t): longValue_t;
                rotateLeftP(arg0: long_t, arg1: object_t): Promise<longValue_t>;
                rotateRightA(arg0: long_t, arg1: object_t, cb: Callback<longValue_t>): void;
                rotateRight(arg0: long_t, arg1: object_t): longValue_t;
                rotateRightP(arg0: long_t, arg1: object_t): Promise<longValue_t>;
                signumA(arg0: long_t, cb: Callback<object_t>): void;
                signum(arg0: long_t): object_t;
                signumP(arg0: long_t): Promise<object_t>;
                sumA(arg0: long_t, arg1: long_t, cb: Callback<longValue_t>): void;
                sum(arg0: long_t, arg1: long_t): longValue_t;
                sumP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
                toBinaryStringA(arg0: long_t, cb: Callback<string>): void;
                toBinaryString(arg0: long_t): string;
                toBinaryStringP(arg0: long_t): Promise<string>;
                toHexStringA(arg0: long_t, cb: Callback<string>): void;
                toHexString(arg0: long_t): string;
                toHexStringP(arg0: long_t): Promise<string>;
                toOctalStringA(arg0: long_t, cb: Callback<string>): void;
                toOctalString(arg0: long_t): string;
                toOctalStringP(arg0: long_t): Promise<string>;
                toStringA(arg0: long_t, arg1: object_t, cb: Callback<string>): void;
                toString(arg0: long_t, arg1: object_t): string;
                toStringP(arg0: long_t, arg1: object_t): Promise<string>;
                toStringA(arg0: long_t, cb: Callback<string>): void;
                toString(arg0: long_t): string;
                toStringP(arg0: long_t): Promise<string>;
                toUnsignedStringA(arg0: long_t, arg1: object_t, cb: Callback<string>): void;
                toUnsignedString(arg0: long_t, arg1: object_t): string;
                toUnsignedStringP(arg0: long_t, arg1: object_t): Promise<string>;
                toUnsignedStringA(arg0: long_t, cb: Callback<string>): void;
                toUnsignedString(arg0: long_t): string;
                toUnsignedStringP(arg0: long_t): Promise<string>;
                valueOfA(arg0: string_t, arg1: object_t, cb: Callback<longValue_t>): void;
                valueOf(arg0: string_t, arg1: object_t): longValue_t;
                valueOfP(arg0: string_t, arg1: object_t): Promise<longValue_t>;
                valueOfA(arg0: string_t, cb: Callback<longValue_t>): void;
                valueOf(arg0: string_t): longValue_t;
                valueOfP(arg0: string_t): Promise<longValue_t>;
                valueOfA(arg0: long_t, cb: Callback<longValue_t>): void;
                valueOf(arg0: long_t): longValue_t;
                valueOfP(arg0: long_t): Promise<longValue_t>;
                MIN_VALUE: longValue_t;
                MAX_VALUE: longValue_t;
                TYPE: Class;
                SIZE: object_t;
                BYTES: object_t;
            }
        }
    }
    module java.lang {
        interface Object {
            equalsA(arg0: object_t, cb: Callback<boolean>): void;
            equals(arg0: object_t): boolean;
            equalsP(arg0: object_t): Promise<boolean>;
            getClassA(cb: Callback<Class>): void;
            getClass(): Class;
            getClassP(): Promise<Class>;
            hashCodeA(cb: Callback<object_t>): void;
            hashCode(): object_t;
            hashCodeP(): Promise<object_t>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            waitA(arg0: long_t, arg1: object_t, cb: Callback<void>): void;
            wait(arg0: long_t, arg1: object_t): void;
            waitP(arg0: long_t, arg1: object_t): Promise<void>;
            waitA(arg0: long_t, cb: Callback<void>): void;
            wait(arg0: long_t): void;
            waitP(arg0: long_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module Object {
            interface Static {
                new (): java.lang.Object;
            }
        }
    }
    module java.lang {
        interface String extends java.lang.Object {
            charAtA(arg0: object_t, cb: Callback<object_t>): void;
            charAt(arg0: object_t): object_t;
            charAtP(arg0: object_t): Promise<object_t>;
            charsA(cb: Callback<object_t>): void;
            chars(): object_t;
            charsP(): Promise<object_t>;
            codePointAtA(arg0: object_t, cb: Callback<object_t>): void;
            codePointAt(arg0: object_t): object_t;
            codePointAtP(arg0: object_t): Promise<object_t>;
            codePointBeforeA(arg0: object_t, cb: Callback<object_t>): void;
            codePointBefore(arg0: object_t): object_t;
            codePointBeforeP(arg0: object_t): Promise<object_t>;
            codePointCountA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
            codePointCount(arg0: object_t, arg1: object_t): object_t;
            codePointCountP(arg0: object_t, arg1: object_t): Promise<object_t>;
            codePointsA(cb: Callback<object_t>): void;
            codePoints(): object_t;
            codePointsP(): Promise<object_t>;
            compareToA(arg0: string_t, cb: Callback<object_t>): void;
            compareTo(arg0: string_t): object_t;
            compareToP(arg0: string_t): Promise<object_t>;
            compareToA(arg0: object_t, cb: Callback<object_t>): void;
            compareTo(arg0: object_t): object_t;
            compareToP(arg0: object_t): Promise<object_t>;
            compareToIgnoreCaseA(arg0: string_t, cb: Callback<object_t>): void;
            compareToIgnoreCase(arg0: string_t): object_t;
            compareToIgnoreCaseP(arg0: string_t): Promise<object_t>;
            concatA(arg0: string_t, cb: Callback<string>): void;
            concat(arg0: string_t): string;
            concatP(arg0: string_t): Promise<string>;
            containsA(arg0: object_t, cb: Callback<boolean>): void;
            contains(arg0: object_t): boolean;
            containsP(arg0: object_t): Promise<boolean>;
            contentEqualsA(arg0: object_t, cb: Callback<boolean>): void;
            contentEquals(arg0: object_t): boolean;
            contentEqualsP(arg0: object_t): Promise<boolean>;
            contentEqualsA(arg0: object_t, cb: Callback<boolean>): void;
            contentEquals(arg0: object_t): boolean;
            contentEqualsP(arg0: object_t): Promise<boolean>;
            endsWithA(arg0: string_t, cb: Callback<boolean>): void;
            endsWith(arg0: string_t): boolean;
            endsWithP(arg0: string_t): Promise<boolean>;
            equalsA(arg0: object_t, cb: Callback<boolean>): void;
            equals(arg0: object_t): boolean;
            equalsP(arg0: object_t): Promise<boolean>;
            equalsIgnoreCaseA(arg0: string_t, cb: Callback<boolean>): void;
            equalsIgnoreCase(arg0: string_t): boolean;
            equalsIgnoreCaseP(arg0: string_t): Promise<boolean>;
            getBytesA(arg0: object_t, arg1: object_t, arg2: object_array_t, arg3: object_t, cb: Callback<void>): void;
            getBytes(arg0: object_t, arg1: object_t, arg2: object_array_t, arg3: object_t): void;
            getBytesP(arg0: object_t, arg1: object_t, arg2: object_array_t, arg3: object_t): Promise<void>;
            getBytesA(arg0: object_t, cb: Callback<object_t[]>): void;
            getBytes(arg0: object_t): object_t[];
            getBytesP(arg0: object_t): Promise<object_t[]>;
            getBytesA(arg0: string_t, cb: Callback<object_t[]>): void;
            getBytes(arg0: string_t): object_t[];
            getBytesP(arg0: string_t): Promise<object_t[]>;
            getBytesA(cb: Callback<object_t[]>): void;
            getBytes(): object_t[];
            getBytesP(): Promise<object_t[]>;
            getCharsA(arg0: object_t, arg1: object_t, arg2: object_array_t, arg3: object_t, cb: Callback<void>): void;
            getChars(arg0: object_t, arg1: object_t, arg2: object_array_t, arg3: object_t): void;
            getCharsP(arg0: object_t, arg1: object_t, arg2: object_array_t, arg3: object_t): Promise<void>;
            getClassA(cb: Callback<Class>): void;
            getClass(): Class;
            getClassP(): Promise<Class>;
            hashCodeA(cb: Callback<object_t>): void;
            hashCode(): object_t;
            hashCodeP(): Promise<object_t>;
            indexOfA(arg0: string_t, arg1: object_t, cb: Callback<object_t>): void;
            indexOf(arg0: string_t, arg1: object_t): object_t;
            indexOfP(arg0: string_t, arg1: object_t): Promise<object_t>;
            indexOfA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
            indexOf(arg0: object_t, arg1: object_t): object_t;
            indexOfP(arg0: object_t, arg1: object_t): Promise<object_t>;
            indexOfA(arg0: string_t, cb: Callback<object_t>): void;
            indexOf(arg0: string_t): object_t;
            indexOfP(arg0: string_t): Promise<object_t>;
            indexOfA(arg0: object_t, cb: Callback<object_t>): void;
            indexOf(arg0: object_t): object_t;
            indexOfP(arg0: object_t): Promise<object_t>;
            internA(cb: Callback<string>): void;
            intern(): string;
            internP(): Promise<string>;
            isEmptyA(cb: Callback<boolean>): void;
            isEmpty(): boolean;
            isEmptyP(): Promise<boolean>;
            lastIndexOfA(arg0: string_t, arg1: object_t, cb: Callback<object_t>): void;
            lastIndexOf(arg0: string_t, arg1: object_t): object_t;
            lastIndexOfP(arg0: string_t, arg1: object_t): Promise<object_t>;
            lastIndexOfA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
            lastIndexOf(arg0: object_t, arg1: object_t): object_t;
            lastIndexOfP(arg0: object_t, arg1: object_t): Promise<object_t>;
            lastIndexOfA(arg0: string_t, cb: Callback<object_t>): void;
            lastIndexOf(arg0: string_t): object_t;
            lastIndexOfP(arg0: string_t): Promise<object_t>;
            lastIndexOfA(arg0: object_t, cb: Callback<object_t>): void;
            lastIndexOf(arg0: object_t): object_t;
            lastIndexOfP(arg0: object_t): Promise<object_t>;
            lengthA(cb: Callback<object_t>): void;
            length(): object_t;
            lengthP(): Promise<object_t>;
            matchesA(arg0: string_t, cb: Callback<boolean>): void;
            matches(arg0: string_t): boolean;
            matchesP(arg0: string_t): Promise<boolean>;
            notifyA(cb: Callback<void>): void;
            notify(): void;
            notifyP(): Promise<void>;
            notifyAllA(cb: Callback<void>): void;
            notifyAll(): void;
            notifyAllP(): Promise<void>;
            offsetByCodePointsA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
            offsetByCodePoints(arg0: object_t, arg1: object_t): object_t;
            offsetByCodePointsP(arg0: object_t, arg1: object_t): Promise<object_t>;
            regionMatchesA(arg0: boolean_t, arg1: object_t, arg2: string_t, arg3: object_t, arg4: object_t, cb: Callback<boolean>): void;
            regionMatches(arg0: boolean_t, arg1: object_t, arg2: string_t, arg3: object_t, arg4: object_t): boolean;
            regionMatchesP(arg0: boolean_t, arg1: object_t, arg2: string_t, arg3: object_t, arg4: object_t): Promise<boolean>;
            regionMatchesA(arg0: object_t, arg1: string_t, arg2: object_t, arg3: object_t, cb: Callback<boolean>): void;
            regionMatches(arg0: object_t, arg1: string_t, arg2: object_t, arg3: object_t): boolean;
            regionMatchesP(arg0: object_t, arg1: string_t, arg2: object_t, arg3: object_t): Promise<boolean>;
            replaceA(arg0: object_t, arg1: object_t, cb: Callback<string>): void;
            replace(arg0: object_t, arg1: object_t): string;
            replaceP(arg0: object_t, arg1: object_t): Promise<string>;
            replaceA(arg0: object_t, arg1: object_t, cb: Callback<string>): void;
            replace(arg0: object_t, arg1: object_t): string;
            replaceP(arg0: object_t, arg1: object_t): Promise<string>;
            replaceAllA(arg0: string_t, arg1: string_t, cb: Callback<string>): void;
            replaceAll(arg0: string_t, arg1: string_t): string;
            replaceAllP(arg0: string_t, arg1: string_t): Promise<string>;
            replaceFirstA(arg0: string_t, arg1: string_t, cb: Callback<string>): void;
            replaceFirst(arg0: string_t, arg1: string_t): string;
            replaceFirstP(arg0: string_t, arg1: string_t): Promise<string>;
            splitA(arg0: string_t, arg1: object_t, cb: Callback<string[]>): void;
            split(arg0: string_t, arg1: object_t): string[];
            splitP(arg0: string_t, arg1: object_t): Promise<string[]>;
            splitA(arg0: string_t, cb: Callback<string[]>): void;
            split(arg0: string_t): string[];
            splitP(arg0: string_t): Promise<string[]>;
            startsWithA(arg0: string_t, arg1: object_t, cb: Callback<boolean>): void;
            startsWith(arg0: string_t, arg1: object_t): boolean;
            startsWithP(arg0: string_t, arg1: object_t): Promise<boolean>;
            startsWithA(arg0: string_t, cb: Callback<boolean>): void;
            startsWith(arg0: string_t): boolean;
            startsWithP(arg0: string_t): Promise<boolean>;
            subSequenceA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
            subSequence(arg0: object_t, arg1: object_t): object_t;
            subSequenceP(arg0: object_t, arg1: object_t): Promise<object_t>;
            substringA(arg0: object_t, arg1: object_t, cb: Callback<string>): void;
            substring(arg0: object_t, arg1: object_t): string;
            substringP(arg0: object_t, arg1: object_t): Promise<string>;
            substringA(arg0: object_t, cb: Callback<string>): void;
            substring(arg0: object_t): string;
            substringP(arg0: object_t): Promise<string>;
            toCharArrayA(cb: Callback<object_t[]>): void;
            toCharArray(): object_t[];
            toCharArrayP(): Promise<object_t[]>;
            toLowerCaseA(arg0: object_t, cb: Callback<string>): void;
            toLowerCase(arg0: object_t): string;
            toLowerCaseP(arg0: object_t): Promise<string>;
            toLowerCaseA(cb: Callback<string>): void;
            toLowerCase(): string;
            toLowerCaseP(): Promise<string>;
            toStringA(cb: Callback<string>): void;
            toString(): string;
            toStringP(): Promise<string>;
            toUpperCaseA(arg0: object_t, cb: Callback<string>): void;
            toUpperCase(arg0: object_t): string;
            toUpperCaseP(arg0: object_t): Promise<string>;
            toUpperCaseA(cb: Callback<string>): void;
            toUpperCase(): string;
            toUpperCaseP(): Promise<string>;
            trimA(cb: Callback<string>): void;
            trim(): string;
            trimP(): Promise<string>;
            waitA(arg0: long_t, arg1: object_t, cb: Callback<void>): void;
            wait(arg0: long_t, arg1: object_t): void;
            waitP(arg0: long_t, arg1: object_t): Promise<void>;
            waitA(arg0: long_t, cb: Callback<void>): void;
            wait(arg0: long_t): void;
            waitP(arg0: long_t): Promise<void>;
            waitA(cb: Callback<void>): void;
            wait(): void;
            waitP(): Promise<void>;
        }
        module String {
            interface Static {
                new (arg0: object_array_t, arg1: object_t, arg2: object_t, arg3: object_t): java.lang.String;
                new (arg0: object_array_t, arg1: object_t, arg2: object_t, arg3: string_t): java.lang.String;
                new (arg0: object_array_t, arg1: object_t, arg2: object_t, arg3: object_t): java.lang.String;
                new (arg0: object_array_t, arg1: object_t, arg2: object_t): java.lang.String;
                new (arg0: object_array_t, arg1: object_t, arg2: object_t): java.lang.String;
                new (arg0: object_array_t, arg1: object_t, arg2: object_t): java.lang.String;
                new (arg0: object_array_t, arg1: object_t): java.lang.String;
                new (arg0: object_array_t, arg1: string_t): java.lang.String;
                new (arg0: object_array_t, arg1: object_t): java.lang.String;
                new (arg0: object_t): java.lang.String;
                new (arg0: object_t): java.lang.String;
                new (arg0: string_t): java.lang.String;
                new (arg0: object_array_t): java.lang.String;
                new (arg0: object_array_t): java.lang.String;
                new (): java.lang.String;
                copyValueOfA(arg0: object_array_t, arg1: object_t, arg2: object_t, cb: Callback<string>): void;
                copyValueOf(arg0: object_array_t, arg1: object_t, arg2: object_t): string;
                copyValueOfP(arg0: object_array_t, arg1: object_t, arg2: object_t): Promise<string>;
                copyValueOfA(arg0: object_array_t, cb: Callback<string>): void;
                copyValueOf(arg0: object_array_t): string;
                copyValueOfP(arg0: object_array_t): Promise<string>;
                formatA(arg0: object_t, arg1: string_t, arg2: object_array_t, cb: Callback<string>): void;
                format(arg0: object_t, arg1: string_t, ...arg2: object_t[]): string;
                format(arg0: object_t, arg1: string_t, arg2: object_array_t): string;
                formatP(arg0: object_t, arg1: string_t, ...arg2: object_t[]): Promise<string>;
                formatP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<string>;
                formatA(arg0: string_t, arg1: object_array_t, cb: Callback<string>): void;
                format(arg0: string_t, ...arg1: object_t[]): string;
                format(arg0: string_t, arg1: object_array_t): string;
                formatP(arg0: string_t, ...arg1: object_t[]): Promise<string>;
                formatP(arg0: string_t, arg1: object_array_t): Promise<string>;
                joinA(arg0: object_t, arg1: object_array_t, cb: Callback<string>): void;
                join(arg0: object_t, ...arg1: object_t[]): string;
                join(arg0: object_t, arg1: object_array_t): string;
                joinP(arg0: object_t, ...arg1: object_t[]): Promise<string>;
                joinP(arg0: object_t, arg1: object_array_t): Promise<string>;
                joinA(arg0: object_t, arg1: object_t, cb: Callback<string>): void;
                join(arg0: object_t, arg1: object_t): string;
                joinP(arg0: object_t, arg1: object_t): Promise<string>;
                valueOfA(arg0: object_array_t, arg1: object_t, arg2: object_t, cb: Callback<string>): void;
                valueOf(arg0: object_array_t, arg1: object_t, arg2: object_t): string;
                valueOfP(arg0: object_array_t, arg1: object_t, arg2: object_t): Promise<string>;
                valueOfA(arg0: object_t, cb: Callback<string>): void;
                valueOf(arg0: object_t): string;
                valueOfP(arg0: object_t): Promise<string>;
                valueOfA(arg0: object_array_t, cb: Callback<string>): void;
                valueOf(arg0: object_array_t): string;
                valueOfP(arg0: object_array_t): Promise<string>;
                valueOfA(arg0: boolean_t, cb: Callback<string>): void;
                valueOf(arg0: boolean_t): string;
                valueOfP(arg0: boolean_t): Promise<string>;
                valueOfA(arg0: long_t, cb: Callback<string>): void;
                valueOf(arg0: long_t): string;
                valueOfP(arg0: long_t): Promise<string>;
                valueOfA(arg0: object_t, cb: Callback<string>): void;
                valueOf(arg0: object_t): string;
                valueOfP(arg0: object_t): Promise<string>;
                valueOfA(arg0: object_t, cb: Callback<string>): void;
                valueOf(arg0: object_t): string;
                valueOfP(arg0: object_t): Promise<string>;
                valueOfA(arg0: object_t, cb: Callback<string>): void;
                valueOf(arg0: object_t): string;
                valueOfP(arg0: object_t): Promise<string>;
                valueOfA(arg0: object_t, cb: Callback<string>): void;
                valueOf(arg0: object_t): string;
                valueOfP(arg0: object_t): Promise<string>;
                CASE_INSENSITIVE_ORDER: object_t;
            }
        }
    }
}
